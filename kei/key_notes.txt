We use PKV to implement our keys.

An example key:

Our keys use a radix of 36, and we have *16* different key "bytes"
The max number of the u32 (our keybyte size) is 1z141z3
The max number of the u64 (our key size and checksum) is 3w5e11264sgsf

We use the ChaCha20 algorithm to generate random numbers from our seed.
Our sequence is generated by suppling 2 64-bit values (seed), and then we
supply them to the ChaCha20 generator to create 4 separate 32-bit values,
then we create a checksum of them AND the seed.

In addition to that, our algorithm now supports 4 userdata values, (U1, U2, U3, U4).
All userdata are stored as usigned 64-bit numbers.
U1 and U2 are only stored as HASHES (the data should be present on the target computer)
U3 and U4 are stored as literal values (they are specific to the key)

We hash U1 and U2 by breaking them up into 8 usigned 8-bit integers, and using crc64 to hash them.

BE AWARE: The indicies are 0-based (aka U1 is at 0)

Also, this library is NOT on Github. It's meant to be compiled into your application as an external local crate,
so that you can freely edit it to fit your program. It is HIGHLY advised to change things around, otherwise keys
from other programs may work for yours.
